https://cloud.smartdraw.com/share.aspx/?pubDocShare=0C144F2F20AD7E9EB2B771CF4F153635775
fileFormatVersion: 2
guid: 866358eed1412234a8635b8a400add06
TextScriptImporter:
  externalObjects: {}
  userData: 
  assetBundleName: 
  assetBundleVariant: 

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using EnumsForPreference;

public partial class BotBehavior : MonoBehaviour
{
    public static void BotAction(BotIdentification bot)
    {
        if (bot.targetObj.tag == Tags.Return(Tags.TagsNumder.HeallPlace))
        {
            bot.healt = bot.maxHealt;
            bot.prioritets = Priorities.None;
            bot.shortTermGoals = ShortTermGoals.None;
        }
        else if (bot.targetObj.tag == Tags.Return(Tags.TagsNumder.Home))
        {
            if (bot.shortTermGoals != ShortTermGoals.Stay)
            {
                FrameworkOfBotAction.GetIn(bot);
                FrameworkOfBotAction.Healing(Time.deltaTime, bot);
            }
            else
            {
                FrameworkOfBotAction.Healing(Time.deltaTime, bot);
            }

            if (bot.healt >= bot.maxHealt)
            {
                bot.healt = bot.maxHealt;
                bot.shortTermGoals = ShortTermGoals.None;
                bot.prioritets = Priorities.None;
                FrameworkOfBotAction.GetOut(bot);
            }
        }
        else if (bot.targetObj.tag == Tags.Return(Tags.TagsNumder.Firewood))
        {
            bot.bag = bot.targetObj;
            Destroy(bot.bag.GetComponent<MeshCollider>());
            bot.bag.transform.SetParent(bot.placeForPortableItems);
            bot.bag.transform.position = bot.placeForPortableItems.position;
            bot.bag.transform.rotation = bot.placeForPortableItems.rotation;
            bot.targetObj = FrameworkOfBotAction.FindePlaceForSell(bot);
            FrameworkOfBotAction.SetTargetForMovement(bot.targetObj, bot);
        }
        else if (bot.targetObj.tag == Tags.Return(Tags.TagsNumder.PlaceForSell))
        {
            bot.money++;
            Destroy(bot.bag);
            bot.prioritets = Priorities.None;
            bot.shortTermGoals = ShortTermGoals.None;
        }
        //GlobalEventManager.Action();
    }
}

fileFormatVersion: 2
guid: 3d55e0eb8f1e77547b4a84b452ef1937
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant: 

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public partial class BotBehavior : MonoBehaviour
{
    public static void CureYourself(BotIdentification bot)
    {
        GameObject healtPlace = TechnicalFunctions.FindNearestObjectByTag(Tags.Return(Tags.TagsNumder.HeallPlace), bot.gameObject, bot.concentration);
        if (healtPlace != null)
        {
            bot.targetObj = healtPlace;
            FrameworkOfBotAction.SetTargetForMovement(healtPlace, bot);
        }
        else
        {
            bot.targetObj = bot.home;
            FrameworkOfBotAction.SetTargetForMovement(bot.home, bot);
        }
    }
}

fileFormatVersion: 2
guid: 5400892b54023a848a314b35bdd8f4a4
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant: 

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public partial class BotBehavior : MonoBehaviour
{
    public static void FeedYourself()
    {

    }
}

fileFormatVersion: 2
guid: 2b5daca2ea11c5d43a15d2ccdab46187
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant: 

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public partial class BotBehavior : MonoBehaviour
{
    public static void FindMoney(BotIdentification bot, params GameObject[] ignore)
    {
        //�������� �������� ������� ���� ��� ������ ����� ������ �������� ���� ����� �� � ������������� ����������� ��� ����������� ����� ���������
        GameObject valueStuff = TechnicalFunctions.FindNearestObjectByTag(Tags.Return(Tags.TagsNumder.Firewood), bot.gameObject, bot.concentration, ignore);

        if(valueStuff==bot.gameObject)
        {
            Debug.Log("��� ������� ����� ������ //�������� ������ �� ���� ������");
            //��� ����� ����������� ���� ��� ������� ����� ����� ��������� � "ignore"
            //�������� ������ �� ���� ������
        }
        //����
        BotIdentification whoGoesThere = TechnicalFunctions.searchInInteractedObject(valueStuff);
        if (whoGoesThere == null)
        {
            bot.targetObj = valueStuff;
            BotPublicData.AddToListWithInteractedObj(valueStuff, bot);
            FrameworkOfBotAction.SetTargetForMovement(valueStuff, bot);
        }
        else
        {
            if (TechnicalFunctions.FirtsIsCloserToTheObject(whoGoesThere, Vector3.Distance(valueStuff.transform.position, bot.transform.position)))
            {
                bot.targetObj = valueStuff;
                FrameworkOfBotAction.SetTargetForMovement(valueStuff, bot);
            }
            else
            {
                GameObject[] ignoreThis = new GameObject[ignore.Length+1];
                ignoreThis[ignore.Length] = valueStuff;
                FindMoney(bot, ignoreThis);
            }
        }
    }
}

fileFormatVersion: 2
guid: b110aae9fdbf6e14f9ca4c662d4b44a9
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant: 

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.AI;
using EnumsForPreference;

public class BotIdentification : MonoBehaviour
{
    #region bot Technical Data

    bool isStarted = false;

    public Transform placeForPortableItems;
    public GameObject bag;
    public NavMeshAgent navMeshAgent;
    public GameObject meshRenderer;
    public Animator animator;
    public GameObject home;
    [SerializeField]    private GameObject targetObj;
    public Priorities prioritets;
    public ShortTermGoals shortTermGoals;
    public float distanceToTarget { get; set; }

    #endregion

    #region bot Stats

    public float money = 0;
    public float hunger = 100;
    public float healt = 100;

    public float maxHealt = 100;
    public float maxHunger = 100;

    public float concentration = 50;

    #endregion

     public void BeforeStart()
    {
        if (!isStarted)
        {
            placeForPortableItems = gameObject.transform.Find("PlaceForPortableItems");
            animator = GetComponent<Animator>();
            navMeshAgent = GetComponent<NavMeshAgent>();
            meshRenderer = GetComponentInChildren<SkinnedMeshRenderer>().gameObject;
            //auxiliaryMethods = new TechnicalFunctions();
        }
    }
}

fileFormatVersion: 2
guid: b49514e6fc0715547b44dded3cc1fe2c
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant: 

using System.Collections.Generic;
using UnityEngine;
using EnumsForPreference;

public class BotMovementController : MonoBehaviour
{
    #region All Argunents

    public List<BotIdentification> listOfBots = new List<BotIdentification>();
    public int botCounter = 0;


    #endregion

   
    private void Update()
    {
        if (listOfBots.Count != 0 && botCounter <= listOfBots.Count)
            SearchUpdate(listOfBots[botCounter]);

        botCounter++;

        if (botCounter >= listOfBots.Count)
            botCounter = 0;
    }
    
    //������ ������� ���� ���-�� �������� ������ �����
    //����� �������������
    private void SearchUpdate(BotIdentification bot)
    {
        if (bot.prioritets == Priorities.None)
        {
            FrameworkOfBotAction.FindTopPriority(bot);
        }
        if (bot.shortTermGoals == ShortTermGoals.None)
        {
            FrameworkOfBotAction.FindMediumPriority(bot);
        }

        if (bot.shortTermGoals == ShortTermGoals.GoTo)
        {
            bot.distanceToTarget = Vector3.Distance(bot.targetObj.transform.position, bot.transform.position);

            if (bot.distanceToTarget <= BotPublicData.InteractDestantion)
            {
                bot.navMeshAgent.destination = transform.position;
                bot.shortTermGoals = ShortTermGoals.None;
            }
        }

        if (bot.shortTermGoals == ShortTermGoals.Interact)
        {
           BotBehavior.BotAction(bot);
        }

        TechnicalFunctions.AnomationOfMove(bot);
    }
}

fileFormatVersion: 2
guid: 35593c5e07f8f724eb9a8f561be67dfc
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant: 

using System.Collections.Generic;
using UnityEngine;

public class BotPublicData
{
    private static List<WhatItInteractsWith> interactableObjects = new List<WhatItInteractsWith>();
    private static float interactDestantion = 2;


    public static List<WhatItInteractsWith> ListWithInteractedObj()
    {
        return interactableObjects;
    }
    public static void AddToListWithInteractedObj(GameObject obj, BotIdentification bot)
    {
        WhatItInteractsWith item = new WhatItInteractsWith();
        item.bot = bot;
        item.interactedObject = obj;
        interactableObjects.Add(item);
    }
    public static void RemoveFromListWithInteractedObj(GameObject obj, BotIdentification bot)
    {
        foreach (var item in interactableObjects)
        {
            if (item.bot == bot)
            {
                interactableObjects.Remove(item);
                continue;
            }
            if (item.interactedObject == obj)
            { 
                item.bot
            }
        }
    }

    public static float InteractDestantion
    {
        get { return interactDestantion; }
    }

}

fileFormatVersion: 2
guid: e4907b1e9b0305d41830b121ce483bb6
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant: 

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using EnumsForPreference;

public static class FrameworkOfBotAction 
{
    public static void FindMediumPriority(BotIdentification bot)
    {
        if (bot.prioritets != Priorities.None)
        {
            if (bot.distanceToTarget <= BotPublicData.InteractDestantion)
            {
                bot.shortTermGoals = ShortTermGoals.Interact;
                BotBehavior.BotAction(bot);
            }
            else
            {
                bot.shortTermGoals = ShortTermGoals.GoTo;
            }
        }
    }
    public static void FindTopPriority(BotIdentification bot)
    {
        if (bot.healt <= (bot.maxHealt - (bot.maxHealt / 2)))
        {
            bot.prioritets = Priorities.Healt;
            BotBehavior.CureYourself(bot);
        }
        else if ((bot.hunger <= (bot.maxHunger - (bot.maxHunger / 2))))
        {
            bot.prioritets = Priorities.Hunger;
            BotBehavior.FeedYourself();
        }
        else
        {
            bot.prioritets = Priorities.Money;
            BotBehavior.FindMoney(bot);
        }
    }
    public static GameObject FindePlaceForSell(BotIdentification bot)
    {
        GameObject place = bot.home.transform.parent.Find("Sell").gameObject;
        return place;
    }
    public static void Healing(float healingPoints, BotIdentification bot)
    {
        if (bot.healt + healingPoints <= bot.maxHealt)
            bot.healt += healingPoints;
        else
            bot.healt = bot.maxHealt;
    }
    public static void GetIn(BotIdentification bot)
    {
        bot.meshRenderer.SetActive(false);
        bot.animator.enabled = false;
        bot.navMeshAgent.enabled = false;
    }
    public static void GetOut(BotIdentification bot)
    {
        bot.meshRenderer.SetActive(true);
        bot.animator.enabled = true;
        bot.navMeshAgent.enabled = true;
    }
    public static void SetTargetForMovement(GameObject target, BotIdentification bot)
    {
        bot.navMeshAgent.destination = target.transform.position;
        bot.shortTermGoals = ShortTermGoals.GoTo;
    }
}

fileFormatVersion: 2
guid: 67a0bb681a2229540aaeca3e84ef7713
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant: 

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

//public static class Preference 
namespace EnumsForPreference
{
    public enum Priorities
    {
        None,
        Healt,
        Hunger,
        Money
    }
    public enum ShortTermGoals
    {
        None,
        GoTo,
        Stay,
        Interact
    }
}

fileFormatVersion: 2
guid: d84a9c95fe23a6449b5ccce367675ea3
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant: 

title This is a title

participant BotMovementController

participant FrameworkOfBotAction
participant BotIdentification bot




participant Alice

participant Bob

participant Double click to edit text

BotMovementController->FrameworkOfBotAction:FindTopPriority(BotIdentification bot bot)
Alice->Bob:Click and drag to create a request or\ntype it in the source area to the left
Alice<--Bob:drag to move
note over Bob,Double click to edit text:Click Help menu for **instructions** and **examples**
Bob->(3)Double click to edit text:non-instantaneous message
fileFormatVersion: 2
guid: 6eeb64fd2d9744a44a0e3d234d561a72
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Tags : MonoBehaviour
{
    public enum TagsNumder 
    {
        Empty,
        HeallPlace,
        Home,
        OtherBot,
        PlaceForSell,
        PlaceForBuy,
        Firewood
    }

    static string[] tags = new string[] 
    {
        "Untagged",
        "Healt+",
        "Home",
        "Person",
        "Sell",
        "Buy",
        "Firewood"
    };

    public static string Return(TagsNumder num)
    {
        return tags[(int)num];
    }
}

fileFormatVersion: 2
guid: c5cd51d667322e94bb1b6d02fcb38124
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant: 

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public static class TechnicalFunctions
{
    
    //������� ������ �� ���� "tag" � ������� "radius" �� ������� "center" ����� box collider ��� mesh collider � ���������� ���.
    //���� �� ������� ������- ���������� null

    //Finds an object by the tag "tag" in the radius "radius" from the object "center" by box collider or mesh collider and returns it.
    //If it doesn't find anything, it returns null
    public static GameObject FindNearestObjectByTag(string tag, GameObject centre, float radius, params GameObject[] ignore)
    {
        GameObject nearestObject = null;
        float magnitude = 0;
        List<GameObject> tagedObjekts = new List<GameObject>();

        Collider[] hitColliders = Physics.OverlapSphere(centre.transform.position, radius);

        foreach (var item in hitColliders)
        {
            if(item.gameObject.tag== tag)
                tagedObjekts.Add(item.gameObject);
        }

        foreach (var item in tagedObjekts)
        {
            bool match = false;
            foreach (var obj in ignore)
            {
                if (item == obj)
                    match = true;
            }
            
            if (match==false)
            {
                if (magnitude == 0 || Vector3.Distance(item.transform.position, centre.transform.position) < magnitude)
                {
                    magnitude = Vector3.Distance(item.transform.position, centre.transform.position);
                    nearestObject = item;
                }
            }
        }
        if (tagedObjekts.Count != ignore.Length)
            return nearestObject;
        else
            return centre;
    }

    //�������� ������ � ���� � ������������, � ������� ����� ����� ������.
    //���� �������- ���������� ������ �� ��������� ����������. ���� �� �������- ���������� null.

    //Gets an object and a sheet with containers in which it needs to find the object.
    //If it finds it, it returns a reference to the container instance. If it doesn't find it, it returns null.
    public static BotIdentification searchInInteractedObject(GameObject searchThis)
    {
        List<WhatItInteractsWith> list = BotPublicData.ListWithInteractedObj();
        foreach (var item in list)
        {
            if (item.interactedObject == searchThis)
                return item.bot;
        }
        return null;
    }


    public static void AnomationOfMove(BotIdentification bot)
    {
        if (bot.animator.GetBool("run") != bot.navMeshAgent.hasPath)
        {
            bot.animator.SetBool("run", bot.navMeshAgent.hasPath);
        }
    }

    public static bool FirtsIsCloserToTheObject(BotIdentification second, float botDistance)
    {
        if (second.distanceToTarget > botDistance)
            return true;
        else
            return false;
    }



    //public static void Overlap(ref List<GameObject> col)
    //{
    //    Collider[] hitColliders = Physics.OverlapSphere(transform.position, concentration);

    //    foreach (var item in hitColliders)
    //    {
    //        col.Add(item.gameObject);
    //    }
    //}
}

fileFormatVersion: 2
guid: 1f21e2806c3fcc74cb87ba2266664c80
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant: 

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class WhatItInteractsWith : MonoBehaviour
{
    public GameObject interactedObject { get; set; }
    public BotIdentification bot { get; set; }

}

fileFormatVersion: 2
guid: fc070214b2bec064f9b76a5f1cde883b
MonoImporter:
  externalObjects: {}
  serializedVersion: 2
  defaultReferences: []
  executionOrder: 0
  icon: {instanceID: 0}
  userData: 
  assetBundleName: 
  assetBundleVariant: 
